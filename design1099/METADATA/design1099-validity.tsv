#TITLE	Coupling Validity Study
#SUMMARY	Measurements for the metrics used in the Coupling Validity Study: Paul Ralph and Ewan Tempero Construct Validity in Software Engineering Research and Software Metrics 22nd International Conference on Evaluation and Assessment in Software Engineering (EASE) 2018. https://doi.org/10.1145/3210459.3210461

##Dataset attributes
Timestamp	Sat Jan 15 09:01:26 NZDT 2022
Tool	mete-analysis(coupling validity):20200425
System	design1099
Codebase	../grad009-01/design1099/design1099

##Measurements
#Metadata
Kind	Nominal	What 'kind' of module (Class, Interface, Enum, Annotation, Exception)
FAN-out (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
FAN-in (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanin) Record only dependencies from target to source (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
FAN-bidir (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (bidir) Dependencies are recorded as bi-directional. If A has a dependency to B, then B has a dependency to A; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
FAN-out-occr (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (occr) Record each occurrence of a dependency separately; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
CBO (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (bidir) Dependencies are recorded as bi-directional. If A has a dependency to B, then B has a dependency to A; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
CBO-out (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
MPC (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (pres) Record only the presence (or not) of an occurrence of a dependency between entities
ICP (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen
LCOM1 (Cohesion)	UnboundedCount	(srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM1-inst (Cohesion)	UnboundedCount	(srcinst) Only record dependencies with respect to instance fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM2 (Cohesion)	UnboundedCount	(srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM2-inst (Cohesion)	UnboundedCount	(srcinst) Only record dependencies with respect to instance fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM4 (Cohesion)	UnboundedCount	(Can't provide easy evidence for number of connected components) (srcinst) Only record dependencies with respect to instance fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
NumMeth (Size)	UnboundedCount	(srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (raw) Do not record dependencies due to synthetic constructs; (srcmem) Include dependencies to members of all visibilities in source
NumFlds(Size)	UnboundedCount	(trgtall) Record dependencies to target modules whether or not the declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (type) Record dependencies between all types, including interfaces, enums, an annotations; (occr) Record each occurrence of a dependency separately; (prim) Include dependencies to primitive types; (same) Include dependencies to the same type
#Data
#Entity	Kind	Evidence	FAN-out (Coupling)	Evidence	FAN-in (Coupling)	Evidence	FAN-bidir (Coupling)	Evidence	FAN-out-occr (Coupling)	Evidence	CBO (Coupling)	Evidence	CBO-out (Coupling)	Evidence	MPC (Coupling)	Evidence	ICP (Coupling)	Evidence	LCOM1 (Cohesion)	Evidence	LCOM1-inst (Cohesion)	Evidence	LCOM2 (Cohesion)	Evidence	LCOM2-inst (Cohesion)	Evidence	LCOM4 (Cohesion)	Evidence	NumMeth (Size)	Evidence	NumFlds(Size)	Evidence
kalah.Kalah	Class	(not needed)	4	[kalah.backend.GameManager, kalah.backend.Game, kalah.frontend.Display, kalah.frontend.DisplayManager]	0	[]	4	[kalah.backend.GameManager, kalah.backend.Game, kalah.frontend.Display, kalah.frontend.DisplayManager]	22	[kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract boolean getLastSeedStatus() <>:[26], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int getPlayerValidMove(int) <>:[7], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintBoardState() <>:[3], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintBoardState() <>:[11], Local:kalah.frontend.Display:[1], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintQuit() <>:[19], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintBoardState() <>:[20], kalah.Kalah#public <init>() {}>kalah.backend.GameManager#public <init>() {}:[2], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int[] getInit() <>:[9], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintTryAgain() <>:[29], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintScore() <>:[14], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract void CleanBoard() <>:[13], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int getPlayerTurn() <>:[23], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract void playerTurn() <>:[28], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int getPlayerTurn() <>:[6], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract int PrintMove(int) <>:[18], kalah.Kalah#private final kalah.backend.Game board, kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int getPlayerTurn() <>:[17], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintWinner() <>:[15], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract boolean move(int,int) <>:[24], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public <init>(com.qualitascorpus.testsupport.IO,kalah.backend.Game) {}:[2], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintQuit() <>:[10]]	4	[kalah.backend.GameManager, kalah.backend.Game, kalah.frontend.Display, kalah.frontend.DisplayManager]	4	[kalah.backend.GameManager, kalah.backend.Game, kalah.frontend.Display, kalah.frontend.DisplayManager]	28	[play(com.qualitascorpus.testsupport.IO)>kalah.backend.GameManager#public boolean move(int,int) {}, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.Display#public abstract void PrintQuit() <>, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.DisplayManager#public void PrintQuit() {}, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.DisplayManager#public <init>(com.qualitascorpus.testsupport.IO,kalah.backend.Game) {}, play(com.qualitascorpus.testsupport.IO)>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, play(com.qualitascorpus.testsupport.IO)>kalah.backend.GameManager#public int getPlayerTurn() {}, play(com.qualitascorpus.testsupport.IO)>kalah.backend.GameManager#public void playerTurn() {}, play(com.qualitascorpus.testsupport.IO)>kalah.backend.Game#public abstract int getPlayerTurn() <>, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.DisplayManager#public void PrintScore() {}, play(com.qualitascorpus.testsupport.IO)>kalah.backend.GameManager#public void CleanBoard() {}, play(com.qualitascorpus.testsupport.IO)>kalah.backend.Game#public abstract int[] getInit() <>, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.Display#public abstract void PrintTryAgain() <>, play(com.qualitascorpus.testsupport.IO)>kalah.backend.Game#public abstract void playerTurn() <>, play(com.qualitascorpus.testsupport.IO)>kalah.backend.Game#public abstract void CleanBoard() <>, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.Display#public abstract void PrintWinner() <>, play(com.qualitascorpus.testsupport.IO)>kalah.backend.GameManager#public int[] getInit() {}, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.DisplayManager#public void PrintBoardState() {}, play(com.qualitascorpus.testsupport.IO)>kalah.backend.Game#public abstract boolean getLastSeedStatus() <>, play(com.qualitascorpus.testsupport.IO)>kalah.backend.GameManager#public boolean getLastSeedStatus() {}, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.DisplayManager#public void PrintTryAgain() {}, play(com.qualitascorpus.testsupport.IO)>kalah.backend.Game#public abstract boolean move(int,int) <>, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.DisplayManager#public void PrintWinner() {}, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.Display#public abstract void PrintBoardState() <>, <init>()>kalah.backend.GameManager#public <init>() {}, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.DisplayManager#public int PrintMove(int) {}, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.Display#public abstract int PrintMove(int) <>, play(com.qualitascorpus.testsupport.IO)>kalah.frontend.Display#public abstract void PrintScore() <>, play(com.qualitascorpus.testsupport.IO)>kalah.backend.Game#public abstract int getPlayerValidMove(int) <>]	44	[kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public int getPlayerTurn() {}:[6], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract boolean getLastSeedStatus() <>:[26], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public void PrintBoardState() {}:[11], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int getPlayerValidMove(int) <>:[7], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintBoardState() <>:[3], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract boolean move(int,int) <>:[24][1]int, kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintQuit() <>:[19], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintBoardState() <>:[11], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public void playerTurn() {}:[28], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintTryAgain() <>:[29], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public boolean move(int,int) {}:[24][0]int, kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public void CleanBoard() {}:[13], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public int[] getInit() {}:[9], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public void PrintTryAgain() {}:[29], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public void PrintQuit() {}:[19], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract void CleanBoard() <>:[13], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract void playerTurn() <>:[28], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public int getPlayerTurn() {}:[23], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int getPlayerTurn() <>:[6], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract boolean move(int,int) <>:[24][0]int, kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract int PrintMove(int) <>:[18][0]int, kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract boolean move(int,int) <>:[24], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public boolean getLastSeedStatus() {}:[26], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public void PrintBoardState() {}:[20], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public boolean move(int,int) {}:[24], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintBoardState() <>:[20], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public void PrintScore() {}:[14], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public int PrintMove(int) {}:[18][0]int, kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public int getPlayerTurn() {}:[17], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int[] getInit() <>:[9], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public int getPlayerValidMove(int) {}:[7][0]int, kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintScore() <>:[14], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public void PrintBoardState() {}:[3], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int getPlayerTurn() <>:[23], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract int PrintMove(int) <>:[18], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int getPlayerTurn() <>:[17], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintWinner() <>:[15], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public void PrintQuit() {}:[10], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.Game#public abstract int getPlayerValidMove(int) <>:[7][0]int, kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.Display#public abstract void PrintQuit() <>:[10], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public void PrintWinner() {}:[15], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.frontend.DisplayManager#public int PrintMove(int) {}:[18], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public int getPlayerValidMove(int) {}:[7], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.backend.GameManager#public boolean move(int,int) {}:[24][1]int]	1	[kalah.Kalah#public static void main(java.lang.String[]) {}>>>kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}]	0	[]	1	[value0]	0	[]	1	[kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}]	3	[Return:kalah.Kalah#public static void main(java.lang.String[]) {}, kalah.Kalah#public <init>() {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}]	1	[kalah.Kalah#private final kalah.backend.Game board]
kalah.backend.Game	Interface	(not needed)	0	[]	3	[kalah.backend.GameManager, kalah.Kalah, kalah.frontend.DisplayManager]	3	[kalah.backend.GameManager, kalah.Kalah, kalah.frontend.DisplayManager]	0	[]	2	[kalah.Kalah, kalah.frontend.DisplayManager]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	10	[kalah.backend.Game#public abstract int getPlayerValidMove(int) <>, kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>, kalah.backend.Game#public abstract boolean move(int,int) <>, kalah.backend.Game#public abstract boolean getLastSeedStatus() <>, kalah.backend.Game#public abstract int getPlayerTurn() <>, kalah.backend.Game#public abstract void CleanBoard() <>, kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>, kalah.backend.Game#public abstract int getWinner() <>, kalah.backend.Game#public abstract int[] getInit() <>, kalah.backend.Game#public abstract void playerTurn() <>]	10	[Return:kalah.backend.Game#public abstract int getWinner() <>, Return:kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>, Return:kalah.backend.Game#public abstract int getPlayerTurn() <>, Return:kalah.backend.Game#public abstract void playerTurn() <>, Return:kalah.backend.Game#public abstract int[] getInit() <>, Return:kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>, Return:kalah.backend.Game#public abstract void CleanBoard() <>, Return:kalah.backend.Game#public abstract boolean getLastSeedStatus() <>, Return:kalah.backend.Game#public abstract int getPlayerValidMove(int) <>, Return:kalah.backend.Game#public abstract boolean move(int,int) <>]	0	[]
kalah.backend.GameManager	Class	(not needed)	4	[kalah.backend.Game, kalah.backend.House, kalah.backend.Store, kalah.backend.Pit]	1	[kalah.Kalah]	5	[kalah.backend.Game, kalah.backend.House, kalah.backend.Store, kalah.backend.Pit, kalah.Kalah]	23	[kalah.backend.GameManager#public int getWinner() {}>kalah.backend.Pit#public int getHouseValue() {}:[4], kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[6], kalah.backend.GameManager#public int getWinner() {}>kalah.backend.Pit#public int getHouseValue() {}:[2], kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>kalah.backend.Pit#public void removeHouseValue() {}:[7], kalah.backend.GameManager#public int getWinner() {}>kalah.backend.Pit#public int getHouseValue() {}:[8], kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[9], kalah.backend.GameManager#public int getWinner() {}>kalah.backend.Pit#public int getHouseValue() {}:[6], kalah.backend.GameManager#private void InitSeedsandHouses() {}>kalah.backend.Store#public <init>(int,int) {}:[4], kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public void addHouseValue(int) {}:[8], kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>kalah.backend.Pit#public void removeHouseValue() {}:[9], kalah.backend.GameManager#private boolean verifyValidInput(int) {}>kalah.backend.Pit#public int getHouseValue() {}:[2], kalah.backend.GameManager#private final kalah.backend.Pit[] board, kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void removeHouseValue() {}:[4], kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[5], kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[13], kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public void addHouseValue(int) {}:[4], kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>kalah.backend.Pit#public int getHouseValue() {}:[2], kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public int getHouseValue() {}:[3], kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}>kalah.backend.Pit#public int getHouseValue() {}:[2], kalah.backend.GameManager#private void InitSeedsandHouses() {}>kalah.backend.House#public <init>(int,int) {}:[2], kalah.backend.GameManager#private final kalah.backend.Pit[] storeBoard, kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public int getHouseValue() {}:[7], Implements:kalah.backend.GameManager>kalah.backend.Game]	4	[kalah.backend.House, kalah.backend.Store, kalah.backend.Pit, kalah.Kalah]	3	[kalah.backend.House, kalah.backend.Store, kalah.backend.Pit]	12	[getSeedsInHousesAmount(int)>kalah.backend.Pit#public int getHouseValue() {}, verifyValidInput(int)>kalah.backend.Pit#public int getHouseValue() {}, CleanBoard()>kalah.backend.Pit#public int getHouseValue() {}, getSeedsInStoresAmount(int)>kalah.backend.Pit#public int getHouseValue() {}, getWinner()>kalah.backend.Pit#public int getHouseValue() {}, move(int,int)>kalah.backend.Pit#public void removeHouseValue() {}, CaptureHouse(int,int,int)>kalah.backend.Pit#public void addHouseValue(int) {}, InitSeedsandHouses()>kalah.backend.House#public <init>(int,int) {}, InitSeedsandHouses()>kalah.backend.Store#public <init>(int,int) {}, move(int,int)>kalah.backend.Pit#public void addHouseValue(int) {}, CaptureHouse(int,int,int)>kalah.backend.Pit#public void removeHouseValue() {}, CleanBoard()>kalah.backend.Pit#public void addHouseValue(int) {}]	24	[kalah.backend.GameManager#public int getWinner() {}>kalah.backend.Pit#public int getHouseValue() {}:[4], kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[6], kalah.backend.GameManager#public int getWinner() {}>kalah.backend.Pit#public int getHouseValue() {}:[2], kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>kalah.backend.Pit#public void removeHouseValue() {}:[7], kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[6][0]int, kalah.backend.GameManager#public int getWinner() {}>kalah.backend.Pit#public int getHouseValue() {}:[8], kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[9], kalah.backend.GameManager#public int getWinner() {}>kalah.backend.Pit#public int getHouseValue() {}:[6], kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public void addHouseValue(int) {}:[8], kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>kalah.backend.Pit#public void removeHouseValue() {}:[9], kalah.backend.GameManager#private boolean verifyValidInput(int) {}>kalah.backend.Pit#public int getHouseValue() {}:[2], kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void removeHouseValue() {}:[4], kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public void addHouseValue(int) {}:[4][0]int, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[5], kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[5][0]int, kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[13], kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public void addHouseValue(int) {}:[4], kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>kalah.backend.Pit#public int getHouseValue() {}:[2], kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public int getHouseValue() {}:[3], kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}>kalah.backend.Pit#public int getHouseValue() {}:[2], kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[9][0]int, kalah.backend.GameManager#public boolean move(int,int) {}>kalah.backend.Pit#public void addHouseValue(int) {}:[13][0]int, kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public int getHouseValue() {}:[7], kalah.backend.GameManager#public void CleanBoard() {}>kalah.backend.Pit#public void addHouseValue(int) {}:[8][0]int]	52	[kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}, kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public int[] getInit() {}>>>kalah.backend.GameManager#public void CleanBoard() {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}, kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public boolean getLastSeedStatus() {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public void CleanBoard() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public boolean getLastSeedStatus() {}, kalah.backend.GameManager#public int[] getInit() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#public boolean move(int,int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public void CleanBoard() {}, kalah.backend.GameManager#public int getWinner() {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#public int getWinner() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public boolean move(int,int) {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public void CleanBoard() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public void CleanBoard() {}, kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}, kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public boolean move(int,int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}, kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean move(int,int) {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public boolean getLastSeedStatus() {}, kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}]	52	[kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}, kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public int[] getInit() {}>>>kalah.backend.GameManager#public void CleanBoard() {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}, kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public boolean getLastSeedStatus() {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public void CleanBoard() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public boolean getLastSeedStatus() {}, kalah.backend.GameManager#public int[] getInit() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#public boolean move(int,int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public void CleanBoard() {}, kalah.backend.GameManager#public int getWinner() {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#private boolean verifyValidInput(int) {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#public int getWinner() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public boolean move(int,int) {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public void CleanBoard() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public void CleanBoard() {}, kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public int getPlayerValidMove(int) {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public int getPlayerValidMove(int) {}>>>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public boolean getLastSeedStatus() {}>>>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}, kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#public int getPlayerTurn() {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>>>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>>>kalah.backend.GameManager#public int getWinner() {}, kalah.backend.GameManager#public boolean move(int,int) {}>>>kalah.backend.GameManager#public void playerTurn() {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}, kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}>>>kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#public boolean move(int,int) {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}, kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}>>>kalah.backend.GameManager#public boolean getLastSeedStatus() {}, kalah.backend.GameManager#private void InitSeedsandHouses() {}>>>kalah.backend.GameManager#public int getPlayerTurn() {}]	26	[value6, value5, value8, value7, value2, value1, value4, value3, value9, value19, value18, value15, value14, value17, value16, value11, value10, value13, value12, value20, value25, value0, value22, value21, value24, value23]	26	[value6, value5, value8, value7, value2, value1, value4, value3, value9, value19, value18, value15, value14, value17, value16, value11, value10, value13, value12, value20, value25, value0, value22, value21, value24, value23]	9	[kalah.backend.GameManager#public int[] getInit() {}, kalah.backend.GameManager#private final int InitialAmountInHouses, kalah.backend.GameManager#private final int InitialHouses, kalah.backend.GameManager#public boolean move(int,int) {}, kalah.backend.GameManager#private final int PlaceAmount, kalah.backend.GameManager#private final int NumberOfPlayers, kalah.backend.GameManager#private final int InitialAmountInStores, kalah.backend.GameManager#private int PlayerStart, kalah.backend.GameManager#private final int InitialStoresPerPlayer]	14	[Return:kalah.backend.GameManager#private boolean verifyValidInput(int) {}, Return:kalah.backend.GameManager#public int getPlayerTurn() {}, kalah.backend.GameManager#public <init>() {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.backend.GameManager#public int getPlayerValidMove(int) {}, Return:kalah.backend.GameManager#private void InitSeedsandHouses() {}, Return:kalah.backend.GameManager#public void playerTurn() {}, Return:kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, Return:kalah.backend.GameManager#public int[] getInit() {}, Return:kalah.backend.GameManager#public void CleanBoard() {}, Return:kalah.backend.GameManager#private void CaptureHouse(int,int,int) {}, Return:kalah.backend.GameManager#public boolean getLastSeedStatus() {}, Return:kalah.backend.GameManager#public int getWinner() {}, Return:kalah.backend.GameManager#public boolean move(int,int) {}, Return:kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}]	11	[kalah.backend.GameManager#private final int InitialAmountInHouses, kalah.backend.GameManager#private final int InitialHouses, kalah.backend.GameManager#private final int PlaceAmount, kalah.backend.GameManager#private final int NumberOfPlayers, kalah.backend.GameManager#private boolean LastSeedSown, kalah.backend.GameManager#private final kalah.backend.Pit[] storeBoard, kalah.backend.GameManager#private final int InitialAmountInStores, kalah.backend.GameManager#private int PlayerStart, kalah.backend.GameManager#private int PlayerTurn, kalah.backend.GameManager#private final kalah.backend.Pit[] board, kalah.backend.GameManager#private final int InitialStoresPerPlayer]
kalah.backend.House	Class	(not needed)	1	[kalah.backend.Pit]	1	[kalah.backend.GameManager]	2	[kalah.backend.GameManager, kalah.backend.Pit]	2	[Extends:kalah.backend.House>kalah.backend.Pit, kalah.backend.House#public <init>(int,int) {}>kalah.backend.Pit#public <init>(int,int) {}:[1]]	2	[kalah.backend.GameManager, kalah.backend.Pit]	1	[kalah.backend.Pit]	1	[<init>(int,int)>kalah.backend.Pit#public <init>(int,int) {}]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	1	[kalah.backend.House#public <init>(int,int) {}>kalah.backend.Pit#public <init>(int,int) {}:[1]]	0	[]
kalah.backend.Pit	Abstract	(not needed)	0	[]	3	[kalah.backend.GameManager, kalah.backend.Store, kalah.backend.House]	3	[kalah.backend.GameManager, kalah.backend.Store, kalah.backend.House]	0	[]	3	[kalah.backend.GameManager, kalah.backend.Store, kalah.backend.House]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	2	[kalah.backend.Pit#protected int player, kalah.backend.Pit#public int getHouseValue() {}]	4	[Return:kalah.backend.Pit#public int getHouseValue() {}, Return:kalah.backend.Pit#public void removeHouseValue() {}, kalah.backend.Pit#public <init>(int,int) {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.backend.Pit#public void addHouseValue(int) {}]	2	[kalah.backend.Pit#protected int player, kalah.backend.Pit#protected int houseValue]
kalah.backend.Store	Class	(not needed)	1	[kalah.backend.Pit]	1	[kalah.backend.GameManager]	2	[kalah.backend.GameManager, kalah.backend.Pit]	2	[kalah.backend.Store#public <init>(int,int) {}>kalah.backend.Pit#public <init>(int,int) {}:[1], Extends:kalah.backend.Store>kalah.backend.Pit]	2	[kalah.backend.GameManager, kalah.backend.Pit]	1	[kalah.backend.Pit]	1	[<init>(int,int)>kalah.backend.Pit#public <init>(int,int) {}]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	1	[kalah.backend.Store#public <init>(int,int) {}>kalah.backend.Pit#public <init>(int,int) {}:[1]]	0	[]
kalah.frontend.Display	Interface	(not needed)	0	[]	2	[kalah.Kalah, kalah.frontend.DisplayManager]	2	[kalah.Kalah, kalah.frontend.DisplayManager]	0	[]	1	[kalah.Kalah]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	6	[kalah.frontend.Display#public abstract void PrintBoardState() <>, kalah.frontend.Display#public abstract int PrintMove(int) <>, kalah.frontend.Display#public abstract void PrintQuit() <>, kalah.frontend.Display#public abstract void PrintScore() <>, kalah.frontend.Display#public abstract void PrintWinner() <>, kalah.frontend.Display#public abstract void PrintTryAgain() <>]	6	[Return:kalah.frontend.Display#public abstract int PrintMove(int) <>, Return:kalah.frontend.Display#public abstract void PrintWinner() <>, Return:kalah.frontend.Display#public abstract void PrintTryAgain() <>, Return:kalah.frontend.Display#public abstract void PrintScore() <>, Return:kalah.frontend.Display#public abstract void PrintBoardState() <>, Return:kalah.frontend.Display#public abstract void PrintQuit() <>]	0	[]
kalah.frontend.DisplayManager	Class	(not needed)	2	[kalah.backend.Game, kalah.frontend.Display]	1	[kalah.Kalah]	3	[kalah.backend.Game, kalah.frontend.Display, kalah.Kalah]	18	[kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[54], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[20], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[12], kalah.frontend.DisplayManager#public void PrintWinner() {}>kalah.backend.Game#public abstract int getWinner() <>:[2], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int[] getInit() <>:[2], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[60], kalah.frontend.DisplayManager#public void PrintWinner() {}>kalah.backend.Game#public abstract int getWinner() <>:[7], kalah.frontend.DisplayManager#private void PrintEnclosure(int) {}>kalah.backend.Game#public abstract int[] getInit() <>:[2], Parameter:kalah.frontend.DisplayManager#public <init>(com.qualitascorpus.testsupport.IO,kalah.backend.Game) {}>kalah.backend.Game:[1], kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[13], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[68], kalah.frontend.DisplayManager#private final kalah.backend.Game board, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[34], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[26], kalah.frontend.DisplayManager#public int PrintMove(int) {}>kalah.backend.Game#public abstract int[] getInit() <>:[2], kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[5], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[46], Implements:kalah.frontend.DisplayManager>kalah.frontend.Display]	2	[kalah.backend.Game, kalah.Kalah]	1	[kalah.backend.Game]	14	[PrintPlayerHouses(int)>kalah.backend.GameManager#public int[] getInit() {}, PrintScore()>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, PrintMove(int)>kalah.backend.GameManager#public int[] getInit() {}, PrintPlayerHouses(int)>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>, PrintPlayerHouses(int)>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}, PrintMove(int)>kalah.backend.Game#public abstract int[] getInit() <>, PrintPlayerHouses(int)>kalah.backend.Game#public abstract int[] getInit() <>, PrintWinner()>kalah.backend.GameManager#public int getWinner() {}, PrintEnclosure(int)>kalah.backend.Game#public abstract int[] getInit() <>, PrintPlayerHouses(int)>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>, PrintEnclosure(int)>kalah.backend.GameManager#public int[] getInit() {}, PrintScore()>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>, PrintPlayerHouses(int)>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}, PrintWinner()>kalah.backend.Game#public abstract int getWinner() <>]	50	[kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[5][0]int, kalah.frontend.DisplayManager#public void PrintWinner() {}>kalah.backend.Game#public abstract int getWinner() <>:[2], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[60], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[54][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[68], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[60], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[68][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[68], kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[5], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}:[54][0]int, kalah.frontend.DisplayManager#private void PrintEnclosure(int) {}>kalah.backend.GameManager#public int[] getInit() {}:[2], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int[] getInit() {}:[2], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[54], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[26][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[60][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}:[12][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[26][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[26], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[12][0]int, kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[13][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}:[54], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}:[46], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[68][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[60][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int[] getInit() <>:[2], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[46][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}:[46][0]int, kalah.frontend.DisplayManager#private void PrintEnclosure(int) {}>kalah.backend.Game#public abstract int[] getInit() <>:[2], kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[13], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[34], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[34], kalah.frontend.DisplayManager#public int PrintMove(int) {}>kalah.backend.Game#public abstract int[] getInit() <>:[2], kalah.frontend.DisplayManager#public void PrintWinner() {}>kalah.backend.GameManager#public int getWinner() {}:[2], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[26], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[46], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[34][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[20], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[12], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[34][0]int, kalah.frontend.DisplayManager#public void PrintWinner() {}>kalah.backend.Game#public abstract int getWinner() <>:[7], kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[5][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}:[20][0]int, kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[13], kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.GameManager#public int getSeedsInStoresAmount(int) {}:[5], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.Game#public abstract int getSeedsInHousesAmount(int) <>:[20][0]int, kalah.frontend.DisplayManager#public int PrintMove(int) {}>kalah.backend.GameManager#public int[] getInit() {}:[2], kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}:[12], kalah.frontend.DisplayManager#public void PrintScore() {}>kalah.backend.Game#public abstract int getSeedsInStoresAmount(int) <>:[13][0]int, kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}>kalah.backend.GameManager#public int getSeedsInHousesAmount(int) {}:[20], kalah.frontend.DisplayManager#public void PrintWinner() {}>kalah.backend.GameManager#public int getWinner() {}:[7]]	7	[kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintTryAgain() {}, kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}, kalah.frontend.DisplayManager#private void PrintEnclosure(int) {}>>>kalah.frontend.DisplayManager#public void PrintBoardState() {}, kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintScore() {}, kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintQuit() {}, kalah.frontend.DisplayManager#public int PrintMove(int) {}>>>kalah.frontend.DisplayManager#public void PrintBoardState() {}, kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintWinner() {}]	7	[kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintTryAgain() {}, kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}, kalah.frontend.DisplayManager#private void PrintEnclosure(int) {}>>>kalah.frontend.DisplayManager#public void PrintBoardState() {}, kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintScore() {}, kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintQuit() {}, kalah.frontend.DisplayManager#public int PrintMove(int) {}>>>kalah.frontend.DisplayManager#public void PrintBoardState() {}, kalah.frontend.DisplayManager#public void PrintBoardState() {}>>>kalah.frontend.DisplayManager#public void PrintWinner() {}]	0	[]	0	[]	1	[kalah.frontend.DisplayManager#public void PrintBoardState() {}]	9	[Return:kalah.frontend.DisplayManager#private void PrintEnclosure(int) {}, Return:kalah.frontend.DisplayManager#public void PrintQuit() {}, Return:kalah.frontend.DisplayManager#public void PrintBoardState() {}, kalah.frontend.DisplayManager#public <init>(com.qualitascorpus.testsupport.IO,kalah.backend.Game) {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.frontend.DisplayManager#public void PrintWinner() {}, Return:kalah.frontend.DisplayManager#public void PrintPlayerHouses(int) {}, Return:kalah.frontend.DisplayManager#public void PrintTryAgain() {}, Return:kalah.frontend.DisplayManager#public void PrintScore() {}, Return:kalah.frontend.DisplayManager#public int PrintMove(int) {}]	2	[kalah.frontend.DisplayManager#private final com.qualitascorpus.testsupport.IO io, kalah.frontend.DisplayManager#private final kalah.backend.Game board]
